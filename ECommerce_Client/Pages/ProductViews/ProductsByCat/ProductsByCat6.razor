@page "/Misc"
@inject IProductService _productService

@if (IsProcessing)
{
    <PageTitle>Loading</PageTitle>
    <div class="text-center">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
}
else
{
    <PageTitle>Products</PageTitle>
    <body class="font-sans">
        <_ProductsHeader></_ProductsHeader>
        <div class="container mx-auto flex flex-wrap pb-20">
            @foreach (var product in ECommerceProducts)
            {
                <div class="w-full md:w-1/2 lg:w-1/3 px-6 mb-12">
                    @if (product.Category.Name == CategoryName)
                    {
                        <MudCard Class="mb-4">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h5" Color="Color.Default">@product.Name</MudText>
                                    <MudRating Color="Color.Dark" SelectedValue="5" />
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardMedia Image="@product.ImageUrl" Height="250" />
                            <MudCardContent>
                                <p class="h-24 min-h-0">
                                    <MudText Typo="Typo.body2" Color="Color.Inherit"> @((MarkupString)product.Description)</MudText>
                                </p>
                            </MudCardContent>
                            <MudCardActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Primary" />
                                <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
                                <MudSpacer />
                                <MudText Class="h-40" Typo="Typo.body2" Color="Color.Default"> Cat:@product.Category.Name</MudText>
                            </MudCardActions>
                        </MudCard>
                    }
                </div>
            }
        </div>
        <_FooterDarkGray></_FooterDarkGray>
    </body>
}


@code {
    public bool IsProcessing { get; set; } = false;
    public IEnumerable<ProductDTO> ECommerceProducts { get; set; } = new List<ProductDTO>();
    public string CategoryName = "Misc";

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        ECommerceProducts = await _productService.GetAll();
        IsProcessing = false;
    }
}


